import { describe, assert, expect, test, beforeEach, vi, beforeAll, afterEach } from 'vitest'
import { erComponentsConfig, erFormConfig, erGeneratorData, utils } from '@ER/formEditor/index.js'
import { mount } from '@vue/test-utils'
import ElementPlus from 'element-plus'
import Vant from 'vant'
import { computed, nextTick, reactive, ref } from 'vue'
import _ from 'lodash-es'
const _mount = (template, data, otherObj) => mount(
  {
    components: {
      erFormConfig
    },
    template,
    data,
    ...otherObj
  },
  {
    attachTo: 'body',
    global: {
      plugins: [
        ElementPlus,
        Vant
      ]
    }
  }
)
describe('Configuration options owned by the config panel', () => {
  const handleListener = vi.fn()
  let wrapper = {}
  const value0 = ref('root')
  const all = ref([])
  const store = reactive({
    fields: [],
    layouts: []
  })
  beforeAll(() => {
    vi.stubEnv('TESTIDTYPE', 'nanoid')
    store.fields = [...erComponentsConfig.fieldsConfig[0].list, ...erComponentsConfig.fieldsConfig[1].list].map(e => {
      const result = erGeneratorData(e, true, 'en')
      if (/^(radio|cascader|checkbox|select)$/.test(e.type)) {
        result.columns[0].options.data = utils.generateOptions(3).map((e, i) => {
          e.label += i + 1
          return e
        })
      }
      return result
    })
    const layoutNodes = erComponentsConfig.fieldsConfig[2].list.map(e => erGeneratorData(e, true, 'en'))
    layoutNodes.forEach((node, index) => {
      store.layouts.push(node)
      switch (node.columns[0].type) {
        case 'grid':
        case 'tabs':
        case 'collapse':
          node.columns[0].columns[0].label = `${node.columns[0].label} > ${node.columns[0].columns[0].type}`
          store.layouts.push(node.columns[0].columns[0])
          break
        case 'table':
          node.columns[0].rows[0].columns[0].label = `${node.columns[0].label} > ${node.columns[0].rows[0].columns[0].type}`
          store.layouts.push(node.columns[0].rows[0].columns[0])
          break
      }
    })
    all.value = [...store.fields, ...store.layouts]
    const sector = computed(() => {
      let result = ''
      if (value0.value === 'root') {
        result = 'root'
      } else {
        result = _.find(all.value, { id: value0.value })
      }
      return result
    })
    wrapper = _mount(`
      <er-form-config
        @listener="handleListener"
        :field="sector"
        :fields="store.fields.map(e => e.columns[0])"
        lang="en"
        ref="EReditorRef"/>
      `, () => ({
      handleListener,
      store,
      sector
    })
    )
    return () => {
      vi.stubEnv('TESTIDTYPE', '')
    }
  })
  afterEach(() => {
    wrapper.findComponent({ ref: 'EReditorRef' }).vm.switchPlatform('pc')
  })
  test('Root:pc', async () => {
    value0.value = 'root'
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:isSync')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:size')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:labelPosition')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:completeButton')).exists()).toBe(true)
  })
  test('Root:mobile', async () => {
    value0.value = 'root'
    wrapper.findComponent({ ref: 'EReditorRef' }).vm.switchPlatform('mobile')
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:isSync')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:size')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:labelPosition')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:completeButton')).exists()).toBe(true)
  })
  test('Email:pc', async () => {
    value0.value = store.fields[0].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Email'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('Email:mobile', async () => {
    wrapper.findComponent({ ref: 'EReditorRef' }).vm.switchPlatform('mobile')
    value0.value = store.fields[0].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Email'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)

    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('Cellphone:pc', async () => {
    value0.value = store.fields[1].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Cellphone'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)

    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('Cellphone:mobile', async () => {
    wrapper.findComponent({ ref: 'EReditorRef' }).vm.switchPlatform('mobile')
    value0.value = store.fields[1].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Cellphone'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)

    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('URL:pc', async () => {
    value0.value = store.fields[2].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'URL'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)

    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('URL:mobile', async () => {
    wrapper.findComponent({ ref: 'EReditorRef' }).vm.switchPlatform('mobile')
    value0.value = store.fields[2].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'URL'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)

    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('Region:pc', async () => {
    value0.value = store.fields[3].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Region'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel-defaultValue', 'id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:regionType')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)

    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('Region:mobile', async () => {
    wrapper.findComponent({ ref: 'EReditorRef' }).vm.switchPlatform('mobile')
    value0.value = store.fields[3].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Region'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel-defaultValue', 'id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:regionType')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)

    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('ID number:pc', async () => {
    value0.value = store.fields[4].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'ID number'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)

    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('ID number:mobile', async () => {
    wrapper.findComponent({ ref: 'EReditorRef' }).vm.switchPlatform('mobile')
    value0.value = store.fields[4].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'ID number'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)

    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('Input:pc', async () => {
    value0.value = store.fields[5].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Input'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)

    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('Input:mobile', async () => {
    wrapper.findComponent({ ref: 'EReditorRef' }).vm.switchPlatform('mobile')
    value0.value = store.fields[5].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Input'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)

    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('Textarea:pc', async () => {
    value0.value = store.fields[6].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Textarea'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)

    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('Textarea:mobile', async () => {
    wrapper.findComponent({ ref: 'EReditorRef' }).vm.switchPlatform('mobile')
    value0.value = store.fields[6].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Textarea'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)

    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('Number:pc', async () => {
    value0.value = store.fields[7].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Number'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)

    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('Number:mobile', async () => {
    wrapper.findComponent({ ref: 'EReditorRef' }).vm.switchPlatform('mobile')
    value0.value = store.fields[7].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Number'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)

    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('Radio:pc', async () => {
    value0.value = store.fields[8].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Radio'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)

    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('Radio:mobile', async () => {
    wrapper.findComponent({ ref: 'EReditorRef' }).vm.switchPlatform('mobile')
    value0.value = store.fields[8].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Radio'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)

    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('Checkbox:pc', async () => {
    value0.value = store.fields[9].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Checkbox'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)

    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('Checkbox:mobile', async () => {
    wrapper.findComponent({ ref: 'EReditorRef' }).vm.switchPlatform('mobile')
    value0.value = store.fields[9].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Checkbox'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)

    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('Select:pc', async () => {
    value0.value = store.fields[10].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Select'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)

    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('Select:mobile', async () => {
    wrapper.findComponent({ ref: 'EReditorRef' }).vm.switchPlatform('mobile')
    value0.value = store.fields[10].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Select'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)

    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('Time:pc', async () => {
    value0.value = store.fields[11].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Time'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)

    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('Time:mobile', async () => {
    wrapper.findComponent({ ref: 'EReditorRef' }).vm.switchPlatform('mobile')
    value0.value = store.fields[11].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Time'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)

    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('Date:pc', async () => {
    value0.value = store.fields[12].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Date'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel-defaultValue', 'id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)

    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('Date:mobile', async () => {
    wrapper.findComponent({ ref: 'EReditorRef' }).vm.switchPlatform('mobile')
    value0.value = store.fields[12].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Date'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel-defaultValue', 'id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)

    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('Rate:pc', async () => {
    value0.value = store.fields[13].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Rate'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)

    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('Rate:mobile', async () => {
    wrapper.findComponent({ ref: 'EReditorRef' }).vm.switchPlatform('mobile')
    value0.value = store.fields[13].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Rate'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)

    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('Switch:pc', async () => {
    value0.value = store.fields[14].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Switch'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)

    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('Switch:mobile', async () => {
    wrapper.findComponent({ ref: 'EReditorRef' }).vm.switchPlatform('mobile')
    value0.value = store.fields[14].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Switch'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)

    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('Slider:pc', async () => {
    value0.value = store.fields[15].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Slider'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)

    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('Slider:mobile', async () => {
    wrapper.findComponent({ ref: 'EReditorRef' }).vm.switchPlatform('mobile')
    value0.value = store.fields[15].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Slider'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)

    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('Html:pc', async () => {
    value0.value = store.fields[16].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Html'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)

    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('Html:mobile', async () => {
    wrapper.findComponent({ ref: 'EReditorRef' }).vm.switchPlatform('mobile')
    value0.value = store.fields[16].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Html'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)

    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('Cascader:pc', async () => {
    value0.value = store.fields[17].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Cascader'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)

    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('Cascader:mobile', async () => {
    wrapper.findComponent({ ref: 'EReditorRef' }).vm.switchPlatform('mobile')
    value0.value = store.fields[17].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Cascader'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)

    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('File:pc', async () => {
    value0.value = store.fields[18].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'File'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(true)

    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('File:mobile', async () => {
    wrapper.findComponent({ ref: 'EReditorRef' }).vm.switchPlatform('mobile')
    value0.value = store.fields[18].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'File'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(true)

    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('Signature:pc', async () => {
    value0.value = store.fields[19].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Signature'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(true)
  })
  test('Signature:mobile', async () => {
    wrapper.findComponent({ ref: 'EReditorRef' }).vm.switchPlatform('mobile')
    value0.value = store.fields[19].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Signature'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(true)
  })
  test('Grid:pc', async () => {
    value0.value = store.layouts[0].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Grid'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(true)
  })
  test('Grid:mobile', async () => {
    wrapper.findComponent({ ref: 'EReditorRef' }).vm.switchPlatform('mobile')
    value0.value = store.layouts[0].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Grid'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(true)
  })
  test('Grid > col', async () => {
    value0.value = store.layouts[1].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Col'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(true)
  })
  test('Table:pc', async () => {
    value0.value = store.layouts[2].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Table'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(true)
  })
  test('Table:mobile', async () => {
    wrapper.findComponent({ ref: 'EReditorRef' }).vm.switchPlatform('mobile')
    value0.value = store.layouts[2].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Table'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(true)
  })
  test('Table > td', async () => {
    value0.value = store.layouts[3].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'td'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('Tabs:pc', async () => {
    value0.value = store.layouts[4].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Tabs'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(true)
  })
  test('Tabs:mobile', async () => {
    wrapper.findComponent({ ref: 'EReditorRef' }).vm.switchPlatform('mobile')
    value0.value = store.layouts[4].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Tabs'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(true)
  })
  test('Tabs > tabsCol', async () => {
    value0.value = store.layouts[5].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Tab panel'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('Collapse:pc', async () => {
    value0.value = store.layouts[6].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Collapse'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(true)
  })
  test('Collapse:mobile', async () => {
    wrapper.findComponent({ ref: 'EReditorRef' }).vm.switchPlatform('mobile')
    value0.value = store.layouts[6].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Collapse'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(true)
  })
  test('Collapse > collapseCol', async () => {
    value0.value = store.layouts[7].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Collapse panel'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('Divider:pc', async () => {
    value0.value = store.layouts[8].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Divider'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(true)
  })
  test('Divider:mobile', async () => {
    wrapper.findComponent({ ref: 'EReditorRef' }).vm.switchPlatform('mobile')
    value0.value = store.layouts[8].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Divider'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(true)
  })
  test('Subform:pc', async () => {
    value0.value = store.layouts[9].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Sub-form'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
  test('Subform:mobile', async () => {
    value0.value = store.layouts[9].id
    await nextTick()
    expect(wrapper.find(utils.getTestId('configPanel:breadcrumb')).findAll('.el-breadcrumb__item').map(e => e.text())).toEqual(['Form Attribute', 'Sub-form'])
    expect(wrapper.find(utils.getTestId('configPanel:id')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:title')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:titleWidth')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:defaultValue')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:placeholder')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:isShowTrim')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:required')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:disabled')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:clearable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:width')).exists()).toBe(true)
    expect(wrapper.find(utils.getTestId('configPanel:prepend')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:append')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:textareaHeight')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:wordLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:controls')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:displayStyle')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:multiple')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:format')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dateRange')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:star')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:allowHalf')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:sliderCount')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:step')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:precision')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:filterable')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:anyNode')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accept')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:uploadLimit')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:fileSize')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:brushColor')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:justify')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:margin')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:padding')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:background')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:borderLine')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabsType')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:tabPosition')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:dataEntry3')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:accordion')).exists()).toBe(false)
    expect(wrapper.find(utils.getTestId('configPanel:contentPosition')).exists()).toBe(false)
  })
})
